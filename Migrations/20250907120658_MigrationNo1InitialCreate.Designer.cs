// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniShop;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiniShop.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250907120658_MigrationNo1InitialCreate")]
    partial class MigrationNo1InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MiniShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorUpdatedId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorUpdatedId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MiniShop.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorUpdatedId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorUpdatedId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MiniShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorUpdatedId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OrderDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorUpdatedId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MiniShop.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorUpdatedId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorUpdatedId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("MiniShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorUpdatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorUpdatedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MiniShop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MiniShop.Models.Category", b =>
                {
                    b.HasOne("MiniShop.Models.User", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("MiniShop.Models.User", "AuthorUpdated")
                        .WithMany()
                        .HasForeignKey("AuthorUpdatedId");

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorUpdated");
                });

            modelBuilder.Entity("MiniShop.Models.Image", b =>
                {
                    b.HasOne("MiniShop.Models.User", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("MiniShop.Models.User", "AuthorUpdated")
                        .WithMany()
                        .HasForeignKey("AuthorUpdatedId");

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorUpdated");
                });

            modelBuilder.Entity("MiniShop.Models.Order", b =>
                {
                    b.HasOne("MiniShop.Models.User", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("MiniShop.Models.User", "AuthorUpdated")
                        .WithMany()
                        .HasForeignKey("AuthorUpdatedId");

                    b.HasOne("MiniShop.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorUpdated");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniShop.Models.OrderProduct", b =>
                {
                    b.HasOne("MiniShop.Models.User", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("MiniShop.Models.User", "AuthorUpdated")
                        .WithMany()
                        .HasForeignKey("AuthorUpdatedId");

                    b.HasOne("MiniShop.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniShop.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorUpdated");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MiniShop.Models.Product", b =>
                {
                    b.HasOne("MiniShop.Models.User", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("MiniShop.Models.User", "AuthorUpdated")
                        .WithMany()
                        .HasForeignKey("AuthorUpdatedId");

                    b.HasOne("MiniShop.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("MiniShop.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorUpdated");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MiniShop.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("MiniShop.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
